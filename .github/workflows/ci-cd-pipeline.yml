name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest .

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > keypair.pem
          chmod 600 keypair.pem

      - name: Deploy to EC2
        run: |
          # EC2에 도커 허브 계정 로그인
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
            sudo docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' -p '${{ secrets.DOCKER_HUB_PASSWORD }}' &&
            sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest &&
            sudo docker run -d --name app_new --network travelplan_travelplan_blog-net -p 3001:3000 --env-file /home/ubuntu/TravelPlan/.env ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest
          "

          # Nginx 설정 파일 수정
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          if sudo docker ps -a | grep -q app_new; then
            # Nginx 설정을 app_new로 변경
            sudo sed -i 's/proxy_pass http:\/\/app_green:3000;/proxy_pass http:\/\/app_new:3000;/' /etc/nginx/nginx.conf &&
            sudo nginx -t && sudo systemctl reload nginx
          else
            echo 'app_new container not created or not running!'
            exit 1
          fi
          "

          # 기존 컨테이너 중지 및 제거
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          CONTAINER_ID=\$(sudo docker ps -q --filter 'name=app_green');
          if [ -n \"\$CONTAINER_ID\" ]; then
            sudo docker stop \$CONTAINER_ID &&
            sudo docker rm \$CONTAINER_ID;
          fi
          "

          # 새로운 컨테이너 이름 변경
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          CONTAINER_ID=\$(sudo docker ps -q --filter 'name=app_new');
          if [ -n \"\$CONTAINER_ID\" ]; then
            sudo docker rename app_new app_green
          else
            echo 'app_new container does not exist for renaming!'
            exit 1
          fi
          "

          # Nginx 설정 다시 변경
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          sudo sed -i 's/proxy_pass http:\/\/app_new:3000;/proxy_pass http:\/\/app_green:3000;/' /etc/nginx/nginx.conf &&
          sudo nginx -t && sudo systemctl reload nginx
          "
