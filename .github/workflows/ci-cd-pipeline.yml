name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      # 도커 이미지 빌드
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest .

      # 도커 허브 로그인
      - name: Docker Login
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 도커 이미지 푸시
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest

      # EC2 SSH 키 설정
      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > keypair.pem
          chmod 600 keypair.pem

      # EC2에 배포
      - name: Deploy to EC2
        run: |
          # EC2에 도커 허브 로그인
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "sudo docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' -p '${{ secrets.DOCKER_HUB_PASSWORD }}'"

          # 새로운 이미지를 풀
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest"

          # 새로운 컨테이너 실행
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          sudo docker run -d --name app_new -p 3001:3000 --env-file /home/ubuntu/TravelPlan/.env ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest
          "

          # 기존 컨테이너 중지 및 제거
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          CONTAINER_ID=\$(sudo docker ps -q --filter 'name=app');
          if [ -n \"\$CONTAINER_ID\" ]; then
            sudo docker stop \$CONTAINER_ID;
            sudo docker rm \$CONTAINER_ID;
          fi
          "

          # 새로운 컨테이너를 기존 이름으로 변경
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          sudo docker rename app_new app
          "
