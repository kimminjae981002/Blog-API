name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install
          npm cache clean --force

      - name: Check disk usage
        run: df -h

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest .

      - name: Cleanup Docker
        run: |
          docker system prune -af

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > keypair.pem
          chmod 600 keypair.pem

      - name: Deploy to EC2
        run: |
          # EC2에 도커 허브 로그인
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "sudo docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' -p '${{ secrets.DOCKER_HUB_PASSWORD }}'"

          # 새로운 이미지를 풀
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest"

          # 새로운 컨테이너 실행 (3001 포트 사용)
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          sudo docker run -d --name app_new --network travelplan_blog-net -p 3001:3000 --env-file /home/ubuntu/TravelPlan/.env ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest
          "

          # 헬스 체크
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          if sudo docker inspect --format='{{json .State.Health.Status}}' app_new | grep -q 'healthy'; then
            # Nginx 설정 파일 수정
            sudo sed -i 's/server app:3000;/server app_new:3001;/' /etc/nginx/nginx.conf
            sudo sed -i 's/server app:3000;/server app_new:3001;/' /etc/nginx/sites-enabled/default

            # Nginx 설정 테스트 및 재시작
            if sudo nginx -t; then
              sudo systemctl reload nginx
            else
              echo 'Nginx configuration test failed! Rolling back...'
              sudo docker stop app_new
              sudo docker rm app_new
              exit 1
            fi

            # 기존 컨테이너 중지 및 제거
            CONTAINER_ID=\$(sudo docker ps -q --filter 'name=app');
            if [ -n "\$CONTAINER_ID" ]; then
              sudo docker stop \$CONTAINER_ID;  # 기존 컨테이너 중지
              sudo docker rm \$CONTAINER_ID;    # 기존 컨테이너 제거
            fi

            # 새로운 컨테이너 이름 변경
            sudo docker rename app_new app
          else
            echo 'New container is not healthy! Aborting deployment.'
            sudo docker stop app_new
            sudo docker rm app_new
            exit 1
          fi
          "

          # 사용하지 않는 Docker 이미지 및 컨테이너 정리
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          sudo docker system prune -f
          "

          # 최종 Nginx 설정 테스트 및 재시작
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          if sudo nginx -t; then
            sudo systemctl reload nginx
          else
            echo 'Final Nginx configuration test failed!'
            exit 1
          fi
          "
