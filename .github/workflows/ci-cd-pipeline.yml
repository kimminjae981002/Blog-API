name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest .

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > keypair.pem
          chmod 600 keypair.pem

      - name: Deploy to EC2
        run: |
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "sudo docker login -u '${{ secrets.DOCKER_HUB_USERNAME }}' -p '${{ secrets.DOCKER_HUB_PASSWORD }}'"
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest || true"
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "
          CONTAINER_ID=\$(sudo docker ps -q --filter ancestor=${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest);
          if [ -n \"\$CONTAINER_ID\" ]; then
            sudo docker stop \$CONTAINER_ID;
            sudo docker rm \$CONTAINER_ID;
          fi"
          ssh -i keypair.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_IP }} "sudo docker run -d -p 3000:3000 --env-file .env ${{ secrets.DOCKER_HUB_USERNAME }}/blog-api-app:latest"
